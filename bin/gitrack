#!/bin/sh
# gitrack: keep track of multiple git repositories and projects with one command!
# Copyright (C) 2012 Derek Ashley Thomas
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#grab colors if available
if [[ -f $HOME/.colors ]] ; then
  source $HOME/.colors
fi
inputstr="$@"

# print the program usage and exit
function printUsage(){
cat - << EOF
$(basename $0) Usage: $(basename $0) [--logs-dir {directory}] [--logs-file {file-name}]
                       [-c] [-iflLmpqv] [-s {directory}]
  EXPLANATION
      $(basename $0) is a program designed to log and maintain several git
      repositories collectively. This way you can push, fetch, and
      merge from multiple repositories in a row for several unrelated
      projects. It also makes it possible to share/sync multiple repos
      accross multiple computers quickly. A single log file is created
      for this: '\$LOGS_DIR/gitrack_record' [by default].

      Make sure that LOGS_DIR is an environment variable set your shell
      startup file before running. You could also specify this directory
      by using the '--logs-dir' option.

  OPTIONS
      -c   --collect      collect [run in a directory that contains one or more git repositories]
      -f   --fetch        fetch (clones the repository if not already)
      -h   --help         this help text
      -i   --info         print detailed information
      -l   --list         list all of the tracked repositories
      -L   --LICENSE      print license information
      -m   --merge        merge (clones the repository if not already) [use with CAUTION]
      -p   --push         push
      -q   --quiet        quiet mode [default]
      -s   --select       select only a single given directory
      -v   --verbose      verbose mode

      --logs-dir={dir}    override LOGS_DIR environment variable
      --logs-file={file}  specify the log file to read from [default: gitrack_record]

  ENVIRONMENT
      LOGS_DIR   A directory that holds log information. Must be an available environment variable
      ~/.colors  Can be a file that holds shell variables with color names. If available, it is sourced.
EOF

exit $1
}
[ $# -eq 0 ] && printUsage
function printLicense(){
cat - << EOF
gitrack: keep track of multiple git repositories and projects with one command!
Copyright (C) 2012 Derek Ashley Thomas

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
EOF
exit 
}
if [ $# -eq 0 ] ; then
  #if no arguments supplied, print the usage
  printUsage 
fi

# print a readable list of our tracked repositories
function printList(){
printf "%-50s %-50s\n" "repository-directory" "origin-URL"
printf "%-50s %-50s\n" "--------------------" "----------"
cat $logFile | awk '{printf "%-50s %-50s\n",$2,$2}'

}

# initialize the variables
function initialize(){
unset OPT_COLLECT
unset OPT_INFO
unset OPT_PUSH
unset OPT_FECT
unset OPT_LIST
unset OPT_MERGE
unset ERROR_IF_NO_LOGS
unset OPT_SELECT
OPT_QUIET=1
}
initialize

# collection function
function collecthere(){
# the top-level directory of the git tree
gitTop=$(git rev-parse --show-toplevel 2> /dev/null)

# find collect the info if available
if [[ "x$gitTop" != "x" ]] ; then
  # this is a git directory!
  grep "$gitTop" $logFile &> /dev/null
  if [[ $? -ne 0 ]] ; then
    gitURL=$(git remote show origin 2> /dev/null | grep 'Push' | awk '{print $NF}' )
    if [[ "x$gitURL" != "x" ]] ; then
      echo "$(echo $gitURL | awk '{print $1}') $gitTop" >> $logFile
      echo "new > ${BLUE_BRIGHT}$(basename $gitTop)${NC}"
      IS_GIT=1
    else
      echo "unk > ${YELLOW}$(basename $gitTop) (not recorded: no origin)${NC}" 
      IS_GIT=0
    fi
  else
    echo "old > ${GREEN}$(basename $gitTop)${NC}"
    IS_GIT=1
  fi
fi
}
function collect(){
echo $(basename $0): collect
i=0
# first, try the current directory
unset IS_GIT
collecthere
if [[ -n $IS_GIT ]] ; then
  return
fi
for direc in $(ls -la | egrep "^d" | awk '{print $NF}' )
do
  # loops only direcectories
  if [[ ! -L $direc  && $direc != '..' && $direc != '.' ]] ; then
    cd $direc
    unset IS_GIT
    collecthere
    cd ..
    let i++
  fi
done
}

# info function
function infohere(){
url=$1
header=$2
if [[ ! -d $header ]] ; then
  ! echo "${RED}Not yet cloned${NC}"
  totalcount=1
  numBehind=1
  # numBehind=1
  return
fi
pushd . > /dev/null

cd $header
if git rev-parse --git-dir &> /dev/null 
then
  branch=$(expr $(git symbolic-ref HEAD 2> /dev/null) : 'refs/heads/\(.*\)')
else
  ! echo "${ERROR_RED}Not a git repsository${NC}"
  totalcount=1
  return
fi

# update references
git remote update origin &> /dev/null
if [[ ! -n "$branch" ]] ; then
  echo  "You don't seem to be on a branch"
  return
fi
# look up this branch in the configuration
remote=$(git config branch.$branch.remote)
remote_ref=$(git config branch.$branch.merge)

# convert the remote ref into the tracking ref... this is a hack
remote_branch=$(expr $remote_ref : 'refs/heads/\(.*\)')
tracking_branch=refs/remotes/$remote/$remote_branch

# make a list of behind/ahead left/right sha's
tmpLR=$(mktemp -t $(basename $0).left-right.XXX)
git rev-list --left-right $tracking_branch...HEAD &> $tmpLR

numAhead=$(grep ">" $tmpLR | wc -l)
numBehind=$(grep "<" $tmpLR | wc -l)

# stats
modified=$(git ls-files --modified | wc -l)
others=$(git ls-files --others --exclude-standard | wc -l)
staged=$(git diff --staged --name-status | wc -l)

# count total number of interesting status points
totalcount=$(($modified + $others + $staged + $numAhead + $numBehind))

# setup color
unset stagColor
if [[ $staged -gt 0 ]] ; then
  stagColor=$GREEN
fi

unset modColor
if [[ $modified -gt 0 ]] ; then
  modColor=$RED
fi

unset otherColor
if [[ $others -gt 0 ]] ; then
  otherColor=$ERROR_RED
fi

# print out the information
echo "  - branch: $branch"
if [[ $numBehind -gt 0 ]] ; then
echo "    * ${RED}behind: ↓ $numBehind${NC}"
fi
if [[ $numAhead -gt 0 ]] ; then
echo "    * ${BLUE_BRIGHT}ahead:  ↑ $numAhead${NC}"
fi
echo "  ${stagColor}${modColor}${otherColor}- status:${NC}"
echo "    * ${stagColor}staged:   $staged${NC}"
echo "    * ${modColor}modified: $modified${NC}"
echo "    * ${otherColor}others:   $others${NC}"
popd > /dev/null
}
# pull function
function fetchhere(){
if [[ -n $OPT_INFO && $numBehind -eq 0 ]] ; then
  return
fi
url=$1
header=$2
pushd . > /dev/null
if [[ -d $header ]] ; then
  echo "<--- pulling ... "
  cd $header
  { 
    git fetch && echo "${GREEN}pulled${NC}" 
  } || {
    echo "${ERROR_RED}*** not pulled ($header)$NC"
  }
else
  echo "<--- cloning ..."
  { 
    git clone $url $header && echo "${BLUE_BRIGHT}cloned${NC}"  
  } || {
    echo "${ERROR_RED}*** not cloned ($header)$NC"
  }
fi
  popd > /dev/null
}
# pull function
function mergehere(){
if [[ -n $OPT_INFO && $numBehind -eq 0 ]] ; then
  return
fi
url=$1
header=$2
pushd . > /dev/null
if [[ -d $header ]] ; then
  echo "<--- pulling ... "
  cd $header
  { 
    git merge origin/master && echo "${GREEN}merged${NC}" 
  } || {
    echo "${ERROR_RED}*** not merged ($header)$NC"
  }
else
  echo "<--- cloning ..."
  { 
    git clone $url $header && echo "${BLUE_BRIGHT}cloned${NC}"  
  } || {
    echo "${ERROR_RED}*** not cloned ($header)$NC"
  }
fi
  popd > /dev/null
}
# push function
function pushhere(){
if [[ -n $OPT_INFO && $numAhead -eq 0 ]] ; then
  return;
fi
url=$1
header=$2
pushd . > /dev/null
  if [[ -d $header ]] ; then
    echo "---> pushing ... "
    cd $header
    { 
      git push && echo  "${GREEN}pushed${NC}" 
    } || {
      echo  "${ERROR_RED}*** not pushed ($header)$NC"
    }
  else
    echo  "${ERROR_RED}*** no directory ($header)$NC"
  fi
  popd > /dev/null
}

# find absolute path of given input
function abspath(){
pushd . > /dev/null; 
if [ -d "$1" ]; then 
   cd "$1"; 
   dirs -l +0; 
else 
   cd "`dirname \"$1\"`"; 
   cur_dir=`dirs -l +0`; 
   if [ "$cur_dir" == "/" ]; then 
      echo "$cur_dir`basename \"$1\"`"; 
   else 
      echo "$cur_dir/`basename \"$1\"`"; 
   fi; 
fi; 
popd > /dev/null; 
}
# check the selected directory
function checkSOpt(){
  if [[ "x$(grep $OPT_SELECT $logFile)" != "x" && -d $OPT_SELECT ]] ; then
    S_URL=$(grep "$OPT_SELECT" $logFile | awk '{print $1}')
    S_DIR=$OPT_SELECT
  else
    echo "$(basename $0): Not valid git-recording $OPT_SELECT" >&2 
    printUsage 1
  fi
  if [[ $(echo $S_URL | wc -w) -gt 1 ]] ; then
    echo "$(basename $0): Do not run selection from parent directories" >&2
    printUsage 1
  fi
}

# total running checks
function runGitRecorderHere(){
  echo "================="
  echo "${header}: "
  # informative output
  if [[ -n $OPT_INFO ]] ; then
    infohere $url $header
  fi
  # pulling
  if [[ -n $OPT_FECT ]] ; then
    fetchhere $url $header
  fi
  # merge
  if [[ -n $OPT_MERGE ]] ; then
    mergehere $url $header
  fi
  #pushing
  if [[ -n $OPT_PUSH ]] ; then
    pushhere $url $header
  fi
}

# Check to see if LOGS_DIR is set
function checkDir(){
if [[ ! -n $LOGS_DIR ]] ; then
  echo "$(basename $0): LOGS_DIR is not yet set!" >&2
  printUsage 1
else
  if [[ ! -n $logFile ]] ; then
    logFile=$LOGS_DIR/gitrack_record
  fi
  # check the size of the logfile
  unset NO_LOG
  if [[ -n $ERROR_IF_NO_LOGS && $(cat $logFile 2> /dev/null | wc -l) -le 0 ]] ; then
    echo "$(basename $0): No logs yet. Run '$(basename $0) -c' in parent directories first" >&2 
    printUsage 1
  fi
fi
}

# split up the options
shortOpts="cihplLfmvqs:"
longOpts="collect,logs-dir:,logs-file:,help,info,list,LICENSE,license,push,fetch,merge,quiet,verbose,select:"
if ! opts=$(getopt -o $shortOpts --long $longOpts  -- $@) ; then
  printUsage 1
fi
set -- $opts

# parse the given ooptions
while [[ $# -gt 0 ]] ; do
  case $1 in
    --logs-file )
      logFile=${2#\'}
      logFile=${logFile%\'}
      shift 2
      ;;
    --logs-dir )
      LOGS_DIR=${2#\'}
      LOGS_DIR=${LOGS_DIR%\'}
      shift 2
      ;;
    -c | --collect )
      OPT_COLLECT=1
      shift 1
      break
      ;;
    -h | --help ) 
      printUsage 0 
      ;;
    -i | --info )
      ERROR_IF_NO_LOGS=1
      OPT_INFO=1
      shift 1
     ;;
   -l | --list )
     OPT_LIST=1
     shift 1
     ;;
   -p | --push )
      ERROR_IF_NO_LOGS=1
      OPT_PUSH=1
      shift 1
      ;;
    -f | --fetch )
      ERROR_IF_NO_LOGS=1
      OPT_FECT=1
      shift 1
      ;;
    -L | --license | --LICENSE ) 
      printLicense
      ;;
    -m | --merge )  compared to origin
      ERROR_IF_NO_LOGS=1
      OPT_MERGE=1
      shift 1
      ;;
    -v | --verbose )
      unset OPT_QUIET
      shift 1
      ;;
    -q | --quiet )
      OPT_INFO=1
      OPT_QUIET=1
      shift 1
      ;;
    -s | --select )
      ERROR_IF_NO_LOGS=1
      OPT_SELECT=${2#\'}
      OPT_SELECT=${OPT_SELECT%\'}
      OPT_SELECT=$(abspath $OPT_SELECT)
      shift 2
      ;;
    *) 
      # end of the line
      break
      ;;
  esac
done
checkDir

# Run collection if requested
if [[ -n $OPT_COLLECT ]] ; then
  collect
  exit 
fi

# Check if the selected directory is collected
if [[ -n $OPT_SELECT ]] ; then
  checkSOpt
fi

# print a list of all repositories
if [[ -n $OPT_LIST ]] ; then
  printList
fi

# perform the necessary functions 
pushd . > /dev/null
if [[ ! -n $OPT_QUIET ]] ; then 
  echo "$(basename $0): $inputstr"
fi
i=0
if [[ -n $OPT_INFO || -n $OPT_PUSH || -n $OPT_FECT || -n $OPT_MERGE ]] ; then
  # something is actually being done
  while read line ; do

    if [[ ! -n $OPT_SELECT ]] ; then
      url=$(echo $line | awk '{print $1}')
      direc=$(echo $line | awk '{print $2}')
    else
      url=$S_URL
      direc=$S_DIR
    fi

    header=$(basename $direc)
    parent=${direc%/*}

    # make sure that the parent directory exists
    mkdir -p $parent
    cd $parent

    # run the recorder
      if [[ -n $OPT_QUIET ]] ; then
        tmp=$(mktemp -t $(basename $0).XXXX)

        # gotta check info, if silent mode
        # infohere $url $header > $tmp

        # now run the desired functions
        runGitRecorderHere &> $tmp

        if [[ $totalcount -gt 0 ]] ; then
          # if the test came up positive, print to screen
          cat $tmp 
        fi
        rm $tmp &> /dev/null
      else
        runGitRecorderHere 
      fi

    # we have already done the one directory; so leave!
    if [[ -n $OPT_SELECT ]] ; then
      break
    fi
    let i++
  done < $logFile
fi
popd > /dev/null
