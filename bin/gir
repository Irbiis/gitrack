#!/bin/sh
# GIR: keep track of multiple git repositories and check on their status
# Copyright (C) 2012 Derek Ashley Thomas
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#grab colors if available
if [[ -f $HOME/.colors ]] ; then
  source $HOME/.colors
fi
inputstr="$@"

# print the program usage and exit
function printUsage(){
cat - << EOF
$(basename $0) Usage: gir [-c] [-ihl] [-s {directory}]
  EXPLANATION
      $(basename $0) is a program designed to log and maintain several 
      git repositories collectively. This way you can push and pull from
      multiple repos in a row for several unrelated projects. It also makes
      it possible to share/sync multiple repos accross multiple computers 
      quickly. A single log file is created for this: \$LOGS_DIR/gir-git_record.
      
      Make sure that LOGS_DIR is an environment variable set your shell
      startup file before running.

  OPTIONS
      -c         collect [run in a directory that contains one or more git repositories]
      -i         information
      -h         push (pull always performed before push if both selected)
      -f         pull (pull always performed before push if both selected)
      -l         print license information
      -n         negate the -q option
      -q         quiet mode (only prints if action were performed. Also, implied '-i')
      -s         select only a single given directory

  ENVIRONMENT
      LOGS_DIR   A directory that holds log information
EOF

exit $1
}
function printLicense(){
cat - << EOF
      GIR  Copyright (C) 2012 Derek Ashley Thomas
      This program comes with ABSOLUTELY NO WARRANTY; for details run '$(basename $0) -l'.
      This is free software, and you are welcome to redistribute it
      under certain conditions; navigate to <http://www.gnu.org/licenses/gpl.html> for conditions.
EOF
exit 
}
if [ $# -eq 0 ] ; then
  #if no arguments supplied, print the usage
  printUsage 
fi

# Check to see if LOGS_DIR is set
if [[ ! -n $LOGS_DIR ]] ; then
  echo "$(basename $0): LOGS_DIR is not yet set!" >&2
  printUsage 1
else
  logFile=$LOGS_DIR/gir-git_record
  # check the size of the logfile
  unset NO_LOG
  if [[ $(cat $logFile 2> /dev/null | wc -l) -le 0 ]] ; then
    NO_LOG=1
  fi
fi

function errorNoLogs(){
if [[ -n $NO_LOG ]] ; then
  echo "$(basename $0): No logs yet. Run '$(basename $0) -c' in parent directories first" >&2 
  printUsage 1
fi
}

# initialize the variables
function initialize(){
unset OPT_COLLECT
unset OPT_INFO
unset OPT_PUSH
unset OPT_FECT
unset OPT_MERGE
unset OPT_QUIET
unset OPT_SELECT
}
initialize

# collection function
function collecthere(){
# the top-level directory of the git tree
gitTop=$(git rev-parse --show-toplevel 2> /dev/null)

# find collect the info if available
if [[ "x$gitTop" != "x" ]] ; then
  # this is a git directory!
  grep "$gitTop" $logFile &> /dev/null
  if [[ $? -eq 1 ]] ; then
    gitURL=$(git remote show origin | grep 'Push' | awk '{print $NF}' )
    if [[ "x$gitURL" != "x" ]] ; then
      echo "$(echo $gitURL | awk '{print $1}') $gitTop" >> $logFile
      echo "new > ${BLUE_BRIGHT}$(basename $gitTop)${NC}"
      IS_GIT=1
    else
      echo "unk > ${YELLOW}$(basename $gitTop) (not recorded: no origin)${NC}" 
      IS_GIT=0
    fi
  else
    echo "old > ${GREEN}$(basename $gitTop)${NC}"
    IS_GIT=1
  fi
fi
}
function collect(){
echo $(basename $0): collect
i=0
# first, try the current directory
unset IS_GIT
collecthere
if [[ -n $IS_GIT ]] ; then
  return
fi
for direc in $(ls -la | egrep "^d" | awk '{print $NF}' )
do
  # loops only direcectories
  if [[ ! -L $direc  && $direc != '..' && $direc != '.' ]] ; then
    cd $direc
    unset IS_GIT
    collecthere
    cd ..
    let i++
  fi
done
}

# info function
function infohere(){
url=$1
header=$2
if [[ ! -d $header ]] ; then
  ! echo "${RED}Not yet cloned${NC}"
  totalcount=1
  numBehind=1
  # numBehind=1
  return
fi
pushd . > /dev/null

cd $header
if git rev-parse --git-dir &> /dev/null 
then
  branch=$(expr $(git symbolic-ref HEAD 2> /dev/null) : 'refs/heads/\(.*\)')
else
  ! echo "${ERROR_RED}Not a git repsository${NC}"
  totalcount=1
  return
fi

# Are we on a remote-tracking branch?
# update refs
git remote update origin &> /dev/null
# work out the current branch name
[ -n "$branch" ] || { echo  "You don't seem to be on a branch"; return ; }
# look up this branch in the configuration
remote=$(git config branch.$branch.remote)
remote_ref=$(git config branch.$branch.merge)
# convert the remote ref into the tracking ref... this is a hack
remote_branch=$(expr $remote_ref : 'refs/heads/\(.*\)')
tracking_branch=refs/remotes/$remote/$remote_branch
# now $tracking_branch should be the local ref tracking HEAD
# unkown=$(git rev-list $tracking_branch..HEAD)
tmpLR=$(mktemp -t $(basename $0).left-right.XXX)
git rev-list --left-right $tracking_branch...HEAD &> $tmpLR
numAhead=$(grep ">" $tmpLR | wc -l)
numBehind=$(grep "<" $tmpLR | wc -l)

# stats
modified=$(git ls-files --modified | wc -l)
others=$(git ls-files --others --exclude-standard | wc -l)
staged=$(git diff --staged --name-status | wc -l)

# count total number of interesting status points
totalcount=$(($modified + $others + $staged + $numAhead + $numBehind))

# setup color
unset stagColor
if [[ $staged -gt 0 ]] ; then
  stagColor=$GREEN
fi

unset modColor
if [[ $modified -gt 0 ]] ; then
  modColor=$RED
fi

unset otherColor
if [[ $others -gt 0 ]] ; then
  otherColor=$ERROR_RED
fi

# print out the information
echo "  - branch: $branch"
if [[ $numBehind -gt 0 ]] ; then
echo "    * ${RED}behind: ↓ $numBehind${NC}"
fi
if [[ $numAhead -gt 0 ]] ; then
echo "    * ${BLUE_BRIGHT}ahead:  ↑ $numAhead${NC}"
fi
echo "  ${stagColor}${modColor}${otherColor}- status:${NC}"
echo "    * ${stagColor}staged:   $staged${NC}"
echo "    * ${modColor}modified: $modified${NC}"
echo "    * ${otherColor}others:   $others${NC}"
popd > /dev/null
}
# pull function
function pullhere(){
if [[ -n $OPT_INFO && $numBehind -eq 0 ]] ; then
  return
fi
url=$1
header=$2
pushd . > /dev/null
if [[ -d $header ]] ; then
  echo "<--- pulling ... "
  cd $header
  { 
    git pull && echo "${GREEN}pulled${NC}" 
  } || {
    echo "${ERROR_RED}*** not pulled ($header)$NC"
  }
else
  echo "<--- cloning ..."
  { 
    git clone $url $header && echo "${BLUE_BRIGHT}cloned${NC}"  
  } || {
    echo "${ERROR_RED}*** not cloned ($header)$NC"
  }
fi
  popd > /dev/null
}
# push function
function pushhere(){
if [[ -n $OPT_INFO && $numAhead -eq 0 ]] ; then
  return;
fi
url=$1
header=$2
pushd . > /dev/null
  if [[ -d $header ]] ; then
    echo "---> pushing ... "
    cd $header
    { 
      git push && echo  "${GREEN}pushed${NC}" 
    } || {
      echo  "${ERROR_RED}*** not pushed ($header)$NC"
    }
  else
    echo  "${ERROR_RED}*** no directory ($header)$NC"
  fi
  popd > /dev/null
}

# find absolute path of given input
function abspath(){
pushd . > /dev/null; 
if [ -d "$1" ]; then 
   cd "$1"; 
   dirs -l +0; 
else 
   cd "`dirname \"$1\"`"; 
   cur_dir=`dirs -l +0`; 
   if [ "$cur_dir" == "/" ]; then 
      echo "$cur_dir`basename \"$1\"`"; 
   else 
      echo "$cur_dir/`basename \"$1\"`"; 
   fi; 
fi; 
popd > /dev/null; 
}
# check the selected directory
function checkSOpt(){
  if [[ "x$(grep $OPT_SELECT $logFile)" != "x" && -d $OPT_SELECT ]] ; then
    S_URL=$(grep "$OPT_SELECT" $logFile | awk '{print $1}')
    S_DIR=$OPT_SELECT
  else
    echo "$(basename $0): Not valid git-recording $OPT_SELECT" >&2 
    printUsage 1
  fi
  if [[ $(echo $S_URL | wc -w) -gt 1 ]] ; then
    echo "$(basename $0): Do not run selection from parent directories" >&2
    printUsage 1
  fi
}

# total running checks
function runGitRecorderHere(){
  echo "================="
  echo "${header}: "
  # informative output
  if [[ -n $OPT_INFO ]] ; then
    infohere $url $header
  fi
  # pulling
  if [[ -n $OPT_FECT ]] ; then
    pullhere $url $header
  fi
  #pushing
  if [[ -n $OPT_PUSH ]] ; then
    pushhere $url $header
  fi
}

# split up the options
shortOpts="cihplfmnqs:"
longOpts="collect,help,info,license,push,fetch,merge,quiet,no-quiet,select:"
if ! opts=$(getopt -o $shortOpts --long $longOpts  -- $@) ; then
  printUsage 1
fi
set -- $opts

# parse the given ooptions
while [[ $# -gt 0 ]] ; do
  case $1 in
    -c | --collect )
      OPT_COLLECT=1
      collect
      shift 1
      exit 
      ;;
    -h | --help ) 
      printUsage 0 
      ;;
    -i | --info )
      errorNoLogs
      OPT_INFO=1
      shift 1
     ;;
   -p | --push )
      errorNoLogs
      OPT_PUSH=1
      shift 1
      ;;
    -f | --fetch )
      errorNoLogs
      OPT_FECT=1
      shift 1
      ;;
    -l | --license ) 
      printLicense
      ;;
    -m | --merge ) 
      errorNoLogs
      OPT_MERGE=1
      shift 1
      ;;
    -n | --no-quiet )
      unset OPT_QUIET
      shift 1
      ;;
    -q | --quiet )
      OPT_INFO=1
      OPT_QUIET=1
      shift 1
      ;;
    -s | --select )
      errorNoLogs
      OPT_SELECT=$(abspath $2)
      shift 1
      checkSOpt
      ;;
    *) 
      # end of the line
      break
      ;;
  esac
done

# perform the necessary functions 
pushd . > /dev/null
if [[ ! -n $OPT_QUIET ]] ; then 
  echo "$(basename $0): $inputstr"
fi
i=0
while read line ; do

  if [[ ! -n $OPT_SELECT ]] ; then
    url=$(echo $line | awk '{print $1}')
    direc=$(echo $line | awk '{print $2}')
  else
    url=$S_URL
    direc=$S_DIR
  fi

  header=$(basename $direc)
  parent=${direc%/*}

  # make sure that the parent directory exists
  mkdir -p $parent
  cd $parent

  # run the recorder
  if [[ -n $OPT_QUIET ]] ; then
    tmp=$(mktemp -t $(basename $0).XXXX)

    # gotta check info, if silent mode
    infohere $url $header > $tmp

    # now run the desired functions
    runGitRecorderHere &> $tmp

    if [[ $totalcount -gt 0 ]] ; then
      # if the test came up positive, print to screen
      cat $tmp 
    fi
    rm $tmp &> /dev/null
  else
    runGitRecorderHere 
  fi

  # we have already done the one directory; so leave!
  if [[ -n $OPT_SELECT ]] ; then
    break
  fi
  let i++
done < $logFile
popd > /dev/null
